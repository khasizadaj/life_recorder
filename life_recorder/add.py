"""Module contains class that adds new records to the database."""

from typing import Dict, Tuple

from . import helper, life_recorder


class AddLifeRecorder(life_recorder.LifeRecorder):
    """Implements adding life records to the database."""

    def act(self, identifier: str = None) -> None:
        """Add a new life record to database."""

        if identifier is not None:
            raise Exception(
                "It's not needed have an identifier when adding a life record.")

        # generate record instance
        generated_id, timestamp = self.get_autogenerated_details()
        tag, content = self.get_user_inputs()
        record = helper.construct_record_dict(generated_id, timestamp, tag,
                                              content)

        # add record to database
        updated_database = helper.update_database(self.database, record)
        self.save_records(updated_database)

        print(
            f"Added life record: #{record['id']}: {record['tag']} - {record['content']}")

    def get_user_inputs(self) -> Tuple:
        """Return user inputs to create a record. these inputs are tag and content."""

        # ask for tag of record
        input_message = self.get_input_message("tag")
        tag = input(input_message)

        # ask for content of record
        input_message = self.get_input_message("content")
        content = input(input_message)

        return tag, content

    def get_autogenerated_details(self) -> Dict:
        """Function gets inputs from user and returns new record."""

        identifier = self.get_identifier()
        timestamp = helper.get_timestamp()

        return identifier, timestamp

    def get_identifier(self) -> int:
        """Function updates and returns the identifier for next record."""

        self.update_last_id()
        return self.last_id

    def update_last_id(self) -> None:
        """Updates last id of the database."""

        self.database["last_id"] += 1

    @property
    def last_id(self):
        """Returns the last id used in the database."""
        return int(self.database["last_id"])


if __name__ == "__main__":
    print(__doc__)
