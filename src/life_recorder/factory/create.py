"""Module contains class that adds new records to the database."""

import sys
from typing import Dict, Tuple, Union

from life_recorder import helper as h
from .base import LifeRecorder


class CreateLifeRecorder(LifeRecorder):
    """Implements adding life records to the database."""

    def __init__(self):
        super().__init__()
        self.input_messages["tag"] = "What is the tag of this record? (optional): "
        self.input_messages["title"] = "What is the title of this record?: "
        self.input_messages["content"] = "What is the content of this record?: "

    def act(self, identifier: Union[str, None] = None):
        """Add a new life record to database."""

        if identifier is not None:
            print("It's not needed to have an identifier when adding a life record.")
            print()
            sys.exit()

        # generate record instance
        generated_id, timestamp = self.get_autogenerated_details()
        tag, title, content = self.get_user_inputs()
        record = h.construct_record_dict(generated_id, timestamp, tag, title,
                                         content)

        # add record to database
        updated_database = h.update_database(self.database, record)
        self.save_records(updated_database)

        h.add_breakline(h.print_pretty_record,
                        func_args=[record], both=True)

    def get_user_inputs(self) -> Tuple:
        """Return user inputs to create a record. these inputs are tag and content."""

        # ask for tag of record
        input_message = self.get_input_message("tag")
        tag = input(input_message)

        # ask for title of record
        input_message = self.get_input_message("title")
        title = input(input_message)
        while title == "":
            title = input("Please enter a title; it can't be blank: ")

        # ask for content of record
        input_message = self.get_input_message("content")
        content = input(input_message)
        while content == "":
            content = input("Please enter a content; it can't be blank: ")

        return tag, title, content

    def get_autogenerated_details(self) -> tuple[str, str]:
        """Function gets inputs from user and returns new record."""

        identifier = self.get_identifier()
        timestamp = h.get_timestamp()

        return identifier, timestamp

    def get_identifier(self) -> str:
        """Function updates and returns the identifier for next record."""

        self.update_last_id()
        return f"lr-{self.last_id}"

    def update_last_id(self) -> None:
        """Updates last id of the database."""

        self.database["last_id"] += 1

    @property
    def last_id(self) -> str:
        """Returns the last id used in the database."""

        return str(self.database["last_id"])


if __name__ == "__main__":
    print(__doc__)
